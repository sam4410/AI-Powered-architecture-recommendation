scalability_task:
  description: >
    Analyze the scalability and performance requirements for this system:
            
    **System Requirements:**
    - Expected users: {expected_users:,}
    - Requests per second: {expected_requests_per_second:,}
    - Data volume: {data_volume_gb}GB
    - Latency requirements: {latency_requirements_ms}ms
    - Peak load multiplier: {peak_load_multiplier}x
    - Scalability needs: {scalability_needs} scaling
    - Geographic distribution: {geographic_distribution}
    - Availability requirements: {availability_requirements}%
    - Multi-tenant needs: {multi_tenant_needs}
    - Data consistency needs: {data_consistency_needs}
            
    **Your Analysis Should Include:**
    1. Load category assessment (small/medium/high/enterprise scale)
    2. Recommended scaling patterns (horizontal vs vertical)
    3. Performance bottleneck identification
    4. Caching and data access strategy recommendations
    5. Architecture pattern recommendations (microservices/monolith/serverless/modular monolith)
    6. Technical implementation considerations
    7. Geographic distribution impact on architecture
    8. Multi-tenancy architecture implications
            
    Provide specific recommendations with detailed technical reasoning.
  expected_output: >
    A comprehensive scalability analysis with:
    - Scale category determination based on users and RPS
    - Recommended architecture patterns with scores (1-10)
    - Scaling strategy recommendations
    - Performance optimization suggestions
    - Risk assessment for scalability challenges
    - Specific technology recommendations
    - Geographic distribution strategy

team_task:
  description: >
    Analyze the team structure and organizational factors using Conway's Law:
            
    **Team Context:**
    - Team size: {team_size} people
    - Number of teams: {number_of_teams}
    - Experience level: {team_experience_level}
    - DevOps maturity: {devops_maturity}
    - Development velocity priority: {development_velocity_priority}
    - Time to market: {time_to_market}
    - Technology stack: {technology_stack}
    - Legacy system integration: {legacy_system_integration}
            
    **Apply Conway's Law to analyze:**
    1. How team structure should influence architecture choice
    2. Team communication patterns and architecture alignment
    3. Skill levels impact on architecture complexity
    4. Development velocity requirements vs architecture choice
    5. Operational capabilities and architecture support needs
    6. Team autonomy requirements
    7. Impact of legacy system integration on team structure
    8. Technology stack familiarity and team capabilities
            
    Recommend architectures that align with the team structure and capabilities.
  expected_output: >
    Team structure analysis including Conway's Law assessment, team-to-architecture alignment analysis,
    skill gap identification, development velocity impact assessment, and architecture recommendations.

cost_task:
  description: >
    Perform comprehensive cost analysis for different architecture options:
            
    **Cost Context:**
    - Budget constraint: {budget_constraint}
    - Scale: {expected_users:,} users, {expected_requests_per_second:,} RPS
    - Data volume: {data_volume_gb}GB
    - Infrastructure: {existing_infrastructure}
    - Cloud provider: {preferred_cloud_provider}
    - Team size: {team_size} people
    - Geographic distribution: {geographic_distribution}
    - Compliance requirements: {compliance_requirements}
    - Security level: {security_level}
    - Availability requirements: {availability_requirements}%
            
    **Analyze Total Cost of Ownership:**
    1. Infrastructure costs (compute, storage, networking, databases)
    2. Development costs (team productivity, development speed)
    3. Operational costs (monitoring, maintenance, DevOps overhead)
    4. Licensing and third-party service costs
    5. Cost scaling characteristics for each architecture
    6. Hidden costs and technical debt implications
    7. Compliance and security cost implications
    8. Multi-region deployment costs
            
    Compare monolithic, microservices, serverless, and modular monolith approaches.
  expected_output: >
    Detailed cost analysis including TCO comparison matrix, cost scaling projections,
    budget constraint impact, cost optimization recommendations, and ROI analysis.

compliance_and_security_task:
  description: >
    Perform comprehensive cost analysis for different architecture options:
            
    **Compliance and Security Context:**
    - Cloud provider: {preferred_cloud_provider}
    - Geographic distribution: {geographic_distribution}
    - Compliance requirements: {compliance_requirements}
    - Security level: {security_level}
            
    **Analyze Modern Compliance and Security Regulations:**
    1. Assess Security Requirements: Analyze technical and business requirements to identify relevant security controls (e.g., encryption, authentication, logging, access control)
    2. Map Compliance Standards: Identify applicable regulatory and compliance frameworks (e.g., GDPR, HIPAA, SOC 2, ISO 27001, PCI-DSS) based on the industry, region, and data classification.
    3. Threat Modeling: Perform a basic threat model to outline potential risks, vulnerabilities, and attack vectors
    4. Data Protection Strategy: Recommend encryption standards, data masking, retention policies, and secure key management based on sensitivity of data and risk level.
    5. IAM (Identity & Access Management): Suggest access control models (e.g., RBAC, ABAC), authentication mechanisms (OAuth2, SAML, JWT), and secure onboarding/offboarding processes
    6. Monitoring & Incident Response Readiness: Define guidelines for logging, auditing, intrusion detection, and response planning to meet compliance and operational security standards.
    7. 3rd Party Risk Management: Assess security implications of third-party services, APIs, and dependencies integrated into the solution.
    8. Cloud Security Recommendations: Provide cloud-specific guidance (e.g., AWS IAM policies, VPC segmentation, GCP service accounts) if cloud platforms are involved
    9. Documentation for Audits: Prepare or outline documentation and artifacts that would be required for compliance audits (e.g., data flow diagrams, policy templates, access logs).
            
    Compare monolithic, microservices, serverless, and modular monolith approaches.
  expected_output: >
    Compliance Requirements Report
    * List of applicable regulations and standards (e.g., GDPR, HIPAA)
    * Mapped requirements with justification for each
    Security Architecture Review Document
    * Identified risks and mitigation strategies
    * Secure communication and data handling best practices
    Threat Model Summary
    * Key assets, threats, vulnerabilities, and mitigation strategies
    * Risk severity assessment (low/medium/high)
    Access Control Plan
    * Proposed identity management strategy (IAM model, tools)
    * Authentication and authorization flows
    Data Protection Plan
    * Data classification and encryption policy
    * Key management suggestions
    * Storage and transmission security strategy
    Audit & Logging Requirements
    * What should be logged and how
    * Retention policy
    * Tools and integrations recommended (e.g., SIEM, CloudTrail)
    Checklist or Policy Template Suggestions
    * Security policy checklists
    * Templates for access review, breach response, and data retention

technology_integration_task:
  description: >
    Provide assistance in designing a detailed integration plan for various services and tools to be integrated in recommended architecture:
            
    1. Analyze client-provided inputs such as:
    - Number of users (concurrent and total): {expected_users:,}
    - Requests per second (RPS) and traffic patterns: {expected_requests_per_second:,}
    - Expected system availability (e.g., 99.9%, 99.99%): {availability_requirements}
    - Latency requirements (e.g., <100ms response time): {latency_requirements_ms}
    - Data consistency needs (strong vs. eventual): {data_consistency_needs}
    - Technology Stack: {technology_stack}
    - Cloud Provider: {preferred_cloud_provider}
    - Security Level: {security_level}
    - Integration Complexity: {integration_complexity}
    - Integration requirements (3rd-party APIs, legacy systems): {legacy_system_integration}
            
    **Integration Requirements:**
    Review and integrate insights from:
    - Scalability Architect's technical performance analysis
    - Team Structure Analyst's Conway's Law assessment  
    - Cost Optimization Analyst's financial analysis
            
    **Technology Stack & Tools Selection**
    **Integration strategy to be adopted or recommended:**
    - Languages (e.g., Node.js, Go, Java, Python)
    - Frameworks (e.g., Spring Boot, Express, FastAPI)
    - Communication patterns (e.g., REST, gRPC, message queues)
    - Containerization & orchestration (e.g., Docker, Kubernetes, ECS)
    - API gateways, service meshes, and observability tools
   
    **Integration Strategy**
    **Define how services or components will communicate:**
    - Synchronous vs. asynchronous communication
    - API versioning and backward compatibility
    - Integration with external systems (e.g., CRM, payment gateways)
    
    **Scalability & Fault Tolerance Design**
    - Horizontal vs. vertical scaling
    - Load balancing strategies
    - Circuit breakers, retries, and timeouts
    - Redundancy and failover mechanisms
    
    **Operational Concerns**
    - Propose CI/CD pipelines, testing strategies, and deployment methodologies
    - Recommend environment setup: dev, staging, prod
    - Suggest monitoring, logging, and alerting tools
    
  expected_output: >
    # Architecture Recommendation Report
    - Suggested architecture type (Monolith, Microservices, Hybrid, Serverless)
    - Justification based on analyzed requirements
    - Trade-offs and rationale
            
    # Technology Stack Proposal
    - Chosen languages, frameworks, communication methods
    - ontainerization, orchestration, and cloud platform suggestions
    - Tools for API management, logging, monitoring
            
    # Component Interaction Diagram (Textual or Visual Reference)
    - Description of how modules/services will interact
    - Key data flows, communication patterns, and boundary definitions
            
    # Scalability and Availability Strategy
    - Resource scaling plan (e.g., autoscaling, load balancers)
    - Fault tolerance mechanisms
    - Disaster recovery/high availability considerations
    
    # Integration Plan
    - Service interfaces, API styles
    - Message brokers/event buses (if applicable)
    - Strategies for 3rd-party and legacy integration
    
    # DevOps and Deployment Strategy
    - CI/CD pipeline overview
    - Environments and promotion strategies
    - Testing strategies (unit, integration, E2E)
    
    # Trade-off Summary
    - Benefits and limitations of the recommended architecture
    - Maintenance, complexity, and long-term scalability notes

synthesis_task:
  description: >
    Synthesize all expert analyses to create the final architecture recommendation:
            
    **System Overview:**
    - Users: {expected_users:,}
    - RPS: {expected_requests_per_second:,}
    - Team: {team_size} people across {number_of_teams} teams
    - Budget: {budget_constraint}
    - Timeline: {time_to_market}
    - Technology Stack: {technology_stack}
    - Cloud Provider: {preferred_cloud_provider}
    - Security Level: {security_level}
    - Integration Complexity: {integration_complexity}
            
    **Integration Requirements:**
    Review and integrate insights from:
    - Scalability Architect's technical performance analysis
    - Team Structure Analyst's Conway's Law assessment  
    - Cost Optimization Analyst's financial analysis
    - Security and Compliance Considerations and Best Practices
    - Integration Platforms and Plan for Recommended Architecture
            
    **Create Unified Recommendation:**
    1. Weight all expert inputs appropriately based on requirement priorities
    2. Identify and resolve conflicts between different expert recommendations
    3. Provide PRIMARY architecture recommendation with confidence score (1-10)
    4. Suggest alternative/hybrid approaches where beneficial
    5. Create detailed implementation roadmap with phases
    6. Identify key risk factors and mitigation strategies
    7. Define success metrics and monitoring approach
    8. Consider all requirement parameters in final decision
            
    **Architecture Options to Evaluate:**
    - Monolithic Architecture
    - Microservices Architecture  
    - Serverless Architecture
    - Event-Driven Architecture
    - Modular Monolith Architecture
    - Hybrid/Layered Approaches
  expected_output: >
    # ARCHITECTURE RECOMMENDATION REPORT
            
    ## Executive Summary
    - **RECOMMENDED ARCHITECTURE:** [Primary choice with confidence score 1-10]
    - **Key Decision Factors:** [Top 3 factors that drove the decision]
    - **Implementation Timeline:** [High-level phases and timeline]
    - **Investment Required:** [Team, time, technology investments]
            
    ## Detailed Analysis
    - **Total Cost of Ownership (TCO) Comparison Matrix:** [Cost components over different architectures]
    - **Multi-dimensional Evaluation Matrix:** [Scoring across scalability, team, and cost dimensions]
    - **Expert Consensus Analysis:** [How experts aligned]
    - **Trade-offs and Compromises:** [What was sacrificed and why]
    - **Risk Assessment:** [Top risks and mitigation strategies]
            
    ## Implementation Roadmap
    - **Phase 1 (0-3 months):** [Immediate steps]
    - **Phase 2 (3-9 months):** [Development phase]
    - **Phase 3 (9-18 months):** [Optimization phase]
            
    ## Success Metrics & Monitoring
    - **Performance KPIs:** [Latency, availability targets]
    - **Team Productivity Metrics:** [Development velocity measures]
    - **Cost Metrics:** [Budget tracking]
    - **Security & Compliance:** [Monitoring requirements]
    
    ## Security Architecture Considerations
    - **Identified Risks and Mitigation Strategies**
    - **Secure Communication and Data Handling Best Practices**
    
    ## Threat Modeling Assessment Summary
    - **Key Assets**
    - **Threats, Vulnerabilities, and Mitigation Strategies**
    - **Risk Severity Assessment**
    
    ## Access Control Plan
    - **Data Classification and Encryption Policy**
    - **Key Management Suggestions**
    - **Storage and Transmission Security Strategy**
    
    ## Audit & Logging Requirements
    - **What Should Be Logged and How**
    - **Retention Policy**
    - **Tools and Integrations Recommended**
    
    ## Checklist or Policy Template Suggestions
    - **Security Policy Checklists**
    - **Templates for Access Review, Breach Response, and Data Retention**
